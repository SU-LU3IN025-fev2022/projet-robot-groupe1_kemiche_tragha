# Projet "robotique" IA&Jeux 2021
#
# Binome:
#  Prénom Nom: Marwan TRAGHA
#  Prénom Nom: Koceila KEMICHE

"""
Stratégie : On se déplace de façon à remplir le maximum de surface. Quand on rencontre un robot adverse on le suit de façon à peindre juste derrière lui.
En parallèle, notre équipe contient 2 explorateurs qui entrent dans les chemins pour couvrir des surfaces "difficilement" atteignables.
"""

import random

def get_team_name():
    return "Picasso" # à compléter (comme vous voulez)

def step(robotId, sensors):

	translation = 1
	rotation = 0
	
	if robotId == 1 or robotId == 7   : # Si on est un explorateur 
		# Si on croise un chemin, on l'emprunte

		if isWallLeft(sensors) and sensors["sensor_front_left"]["distance"] == 1:
			proba = random.random()
			if proba < 0.9 : 
				rotation = -0.3
			else : 
				rotation = random.uniform(0,1)
			return translation, rotation

		if isWallRight(sensors) and sensors["sensor_front_right"]["distance"] == 1: # Chemin à droite	
			proba = random.random()
			if proba < 0.9 : 
				rotation = 0.3
			else : 
				rotation = random.uniform(-1,0)
			return translation, rotation

		# Sinon on fuit 

		if sensors["sensor_front_left"]["distance"] < 1 or sensors["sensor_front"]["distance"] < 1 : 
			rotation = 0.5 # rotation vers la droite

		if sensors["sensor_front_right"]["distance"] < 1:
			rotation = -0.5 # rotation vers la gauche
	
		return translation, rotation

	else: 
		# Si on croise un allié proche on le fuit
		"""
		Pour fuir un allié on choisit une rotation aléatoire, ainsi on limite les comportements pré-définis ce qui nous permet de na pas avoir de "tendance de déplacements" et de couvrir un maximum de surface.
		"""

		if sensors["sensor_front"]["isRobot"] == True and sensors["sensor_front"]["isSameTeam"] == True: # Si un allié est devant
			rotation = random.uniform(-1,1)
			return translation, rotation	

		if sensors["sensor_front_left"]["isRobot"] == True and sensors["sensor_front_left"]["isSameTeam"] == True: # Si un allié est devant à gauche
			rotation = random.uniform(-1,1)
			return translation, rotation
		
		if sensors["sensor_front_right"]["isRobot"] == True and sensors["sensor_front_right"]["isSameTeam"] == True: # Si un allié est devant à droite
			rotation = random.uniform(-1,1)
			return translation, rotation

		if sensors["sensor_left"]["isRobot"] == True and sensors["sensor_left"]["isSameTeam"] == True: # Si un allié est à gauche
			rotation = random.uniform(-1,1)
			return translation, rotation

		if sensors["sensor_right"]["isRobot"] == True and sensors["sensor_right"]["isSameTeam"] == True: # Si un allié est à droite
			rotation = random.uniform(-1,1)
			return translation, rotation
		

		# Si on croise un ennemi proche on le suit (1)
		if sensors["sensor_front"]["isRobot"] == True: # Si un ennemi est devant
			return translation, rotation

		if sensors["sensor_front_left"]["isRobot"] == True: # Si un ennemi est devant à gauche
			rotation = -0.5
			return translation, rotation
		
		if sensors["sensor_front_right"]["isRobot"] == True: # Si un ennemi est devant à droite
			rotation = 0.5
			return translation, rotation 

		if sensors["sensor_left"]["isRobot"] == True: # Si un ennemi est à gauche
			rotation = -1
			return translation, rotation

		if sensors["sensor_right"]["isRobot"] == True: # Si un ennemi est à droite
			rotation = 1
			return translation, rotation

		# Si c'est un mur on le fuit
		if sensors["sensor_front_left"]["distance"] < 1 or sensors["sensor_front"]["distance"] < 1 : 
			rotation = 0.5 # rotation vers la droite
		if sensors["sensor_front_right"]["distance"] < 1:
			rotation = -0.5 # rotation vers la gauche

	return translation, rotation

"""
Fonctions utilitaires
"""

def isWallFront(sensors):
	"""
		Renvoie True si un mur est en face et False sinon	
	"""
	return sensors["sensor_front"]["isRobot"] == False and sensors["sensor_front"]["distance"] != 1 

def isWallRight(sensors):
	return sensors["sensor_right"]["isRobot"] == False and sensors["sensor_right"]["distance"] != 1 

def isWallLeft(sensors):
	return sensors["sensor_left"]["isRobot"] == False and sensors["sensor_left"]["distance"] != 1 

def isWallFrontRight(sensors):
	return sensors["sensor_front_right"]["isRobot"] == False and sensors["sensor_front_right"]["distance"] != 1 

def isWallBackRight(sensors):
	return sensors["sensor_back_right"]["isRobot"] == False and sensors["sensor_back_right"]["distance"] != 1 

def isWallFrontLeft(sensors):
	return sensors["sensor_front_left"]["isRobot"] == False and sensors["sensor_front_left"]["distance"] != 1 

def isWallBackLeft(sensors):
	return sensors["sensor_back_left"]["isRobot"] == False and sensors["sensor_back_left"]["distance"] != 1 




























