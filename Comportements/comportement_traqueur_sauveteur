# Projet "robotique" IA&Jeux 2021
#
# Binome:
#  Prénom Nom: Marwan TRAGHA
#  Prénom Nom: Koceila KEMICHE

""" 
Stratégie : 
On se déplace de façon à remplir le maximum de surface. Quand on rencontre un robot adverse on le suit de façon à peindre juste derrière lui.
En parallèle, notre équipe compte deux sauveteurs qui sortent leurs alliés hors des situations de blocage.
"""

import random

def get_team_name():
    return "Picasso" # à compléter (comme vous voulez)

def step(robotId, sensors):

	translation = 1
	rotation = 0

	if robotId == 0 or robotId == 7 : # 2 sauveteurs

		# Si on croise un allié proche, on se place derrière pour le tracter

		if sensors["sensor_front"]["isRobot"] == True and sensors["sensor_front"]["isSameTeam"] == True: # Si un allié est devant
			translation = 1
			return translation, rotation	

		if sensors["sensor_front_left"]["isRobot"] == True and sensors["sensor_front_left"]["isSameTeam"] == True: # Si un allié est devant à gauche
			rotation = -0.5
			translation = 1
			return translation, rotation
		
		if sensors["sensor_front_right"]["isRobot"] == True and sensors["sensor_front_right"]["isSameTeam"] == True: # Si un allié est devant à droite
			rotation = 0.5
			translation = -1
			return translation, rotation

		# Sinon on couvre le maximum de surface possible en évitant les murs

		if sensors["sensor_front_left"]["distance"] < 1 or sensors["sensor_front"]["distance"] < 1 : 
			rotation = 0.5 # rotation vers la droite
		if sensors["sensor_front_right"]["distance"] < 1:
			rotation = -0.5 # rotation vers la gauche

		return translation, rotation

	else : # 6 traqueurs

		# Si on croise un allié proche on le fuit
		"""
		Pour fuir un allié on choisit une rotation aléatoire, ainsi on limite les comportements pré-définis ce qui nous permet de na pas avoir de "tendance de déplacements" et de couvrir un maximum de surface.
		"""

		if sensors["sensor_front"]["isRobot"] == True and sensors["sensor_front"]["isSameTeam"] == True: # Si un allié est devant
			rotation = random.uniform(-1,1)
			return translation, rotation	

		if sensors["sensor_front_left"]["isRobot"] == True and sensors["sensor_front_left"]["isSameTeam"] == True: # Si un allié est devant à gauche
			rotation = random.uniform(-1,1)
			return translation, rotation
		
		if sensors["sensor_front_right"]["isRobot"] == True and sensors["sensor_front_right"]["isSameTeam"] == True: # Si un allié est devant à droite
			rotation = random.uniform(-1,1)
			return translation, rotation

		if sensors["sensor_left"]["isRobot"] == True and sensors["sensor_left"]["isSameTeam"] == True: # Si un allié est à gauche
			rotation = random.uniform(-1,1)
			return translation, rotation

		if sensors["sensor_right"]["isRobot"] == True and sensors["sensor_right"]["isSameTeam"] == True: # Si un allié est à droite
			rotation = random.uniform(-1,1)
			return translation, rotation
		
		"""
		Si on est bloqué avec un ennemi on attend un allié pour nous sauver.
		"""
		if sensors["sensor_front"]["isRobot"] == True and sensors["sensor_back"]["isRobot"] == True and sensors["sensor_back"]["isSameTeam"] == True: # Si on est bloqué avec un ennemi et qu'un allié vient à l'arrière
			rotation = -1
			return translation, rotation

		if sensors["sensor_front"]["isRobot"] == True and sensors["sensor_back_right"]["isRobot"] == True and sensors["sensor_back_right"]["isSameTeam"] == True: # Si on est bloqué avec un ennemi et qu'un allié vient à l'arrière droit
			rotation = -1
			return translation, rotation
		
		if sensors["sensor_front"]["isRobot"] == True and sensors["sensor_back_left"]["isRobot"] == True and sensors["sensor_back_left"]["isSameTeam"] == True: # Si on est bloqué avec un ennemi et qu'un allié vient à l'arrière
			rotation = 1
			return translation, rotation

		# Si on croise un ennemi proche on le suit (1)
		if sensors["sensor_front"]["isRobot"] == True: # Si un ennemi est devant
			return translation, rotation

		if sensors["sensor_front_left"]["isRobot"] == True: # Si un ennemi est devant à gauche
			rotation = -0.5
			return translation, rotation
		
		if sensors["sensor_front_right"]["isRobot"] == True: # Si un ennemi est devant à droite
			rotation = 0.5
			return translation, rotation 

		if sensors["sensor_left"]["isRobot"] == True: # Si un ennemi est à gauche
			rotation = -1
			return translation, rotation

		if sensors["sensor_right"]["isRobot"] == True: # Si un ennemi est à droite
			rotation = 1
			return translation, rotation

		# Si c'est un mur on le fuit
		if sensors["sensor_front_left"]["distance"] < 1 or sensors["sensor_front"]["distance"] < 1 : 
			rotation = 0.5 # rotation vers la droite
		if sensors["sensor_front_right"]["distance"] < 1:
			rotation = -0.5 # rotation vers la gauche

	return translation, rotation

